/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kotlinmud

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import kotlinmud.action.actions.describeRoom
import kotlinmud.io.Request
import kotlinmud.mob.Disposition
import kotlinmud.test.createTestService
import kotlinmud.test.globalSetup
import kotlinmud.test.globalTeardown
import org.jetbrains.exposed.sql.transactions.transaction
import org.junit.AfterClass
import org.junit.BeforeClass

class ActionServiceTest {
    companion object {
        @BeforeClass
        @JvmStatic
        fun setup() {
            globalSetup()
        }

        @AfterClass
        @JvmStatic
        fun teardown() {
            globalTeardown()
        }
    }

    @Test
    fun testLookDescribesARoom() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()
        val room = testService.getRoomForMob(mob)
        val observers = testService.getMobsForRoom(room).filter { it != mob }

        // when
        val response = testService.runAction(mob, "look")

        // then
        assertEquals(
            response.message,
            describeRoom(Request(mob, "look", room), observers))
    }

    @Test
    fun testMobMovesNorth() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // when
        val response = testService.runAction(mob, "n")

        // then
        assertEquals(response.message, "test room no. 2\n" +
                "a test room is here\n" +
                "Exits [S]")
    }

    @Test
    fun testMobMovesSouth() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // when
        val response = testService.runAction(mob, "s")

        // then
        assertEquals(response.message, "test room no. 3\n" +
                "a test room is here\n" +
                "Exits [N]")
    }

    @Test
    fun testMobCannotMoveInAnInvalidDirection() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // when
        val response = testService.runAction(mob, "w")

        // then
        assertEquals(response.message, "Alas, that direction does not exist.")
    }

    @Test
    fun testMobCannotMoveWhileSitting() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // given
        transaction { mob.disposition = Disposition.SITTING.value }

        // when
        val response = testService.runAction(mob, "n")

        // then
        assertEquals("you are sitting and cannot do that.", response.message, response.message)
    }

    @Test
    fun testMobCanGetItemFromRoom() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // when
        val response = testService.runAction(mob, "get helm")

        // then
        assertTrue(response.message.startsWith("you pick up the helmet"))
        assertEquals(transaction { mob.inventory.items.count() }, 1)
    }

    @Test
    fun testMobCannotGetNonexistentItemFromRoom() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()

        // when
        val response = testService.runAction(mob, "get foo")

        // then
        assertTrue(response.message == "you don't see that anywhere.", response.message)
        assertEquals(transaction { mob.inventory.items.count() }, 0)
    }

    @Test
    fun testMobCanDropItem() {
        // setup
        val testService = createTestService()
        val mob = testService.createMob()
        testService.createItem(transaction { mob.inventory })

        // when
        val response = testService.runAction(mob, "drop helm")

        // then
        assertTrue(response.message.startsWith("you drop the helmet"))
        assertEquals(transaction { mob.inventory.items.count() }, 0)
    }
}
